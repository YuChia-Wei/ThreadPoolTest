
version: '3.8'

services:
  dotnet-runtime-control-thread-app:
    build:
      context: ../
      dockerfile: ThreadsPoolTest.DotnetControl/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-contrib:4317
      - OTEL_SERVICE_NAME=runtime-control
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4GB
    depends_on:
      - otel-collector-contrib

  dotnet-preset-thread-app:
    build:
      context: ../
      dockerfile: ThreadsPoolTest.SetMinThreadsPool/Dockerfile
    ports:
      - "8081:8080"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-contrib:4317
      - OTEL_SERVICE_NAME=preset-min
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4GB
    depends_on:
      - otel-collector-contrib

  otel-collector-contrib:
    image: otel/opentelemetry-collector-contrib:0.113.0
    restart: always
    container_name: otel-collector-contrib
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./config/otel-collector-contrib-config.yaml:/etc/otel-collector.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889"

  # 以下參考 grafana tempo 範例
  # via: https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/docker-compose.yaml
  tempo:
    image: grafana/tempo:2.3.0
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
#      - ./tempo-data:/tmp/tempo
    ports:
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.53.0
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector-contrib

  # 以下參考 grafana loki 範例與其他 github 中找到的範本
  # via: https://github.com/grafana/loki/blob/main/examples/getting-started/docker-compose.yaml
  # via: https://github.com/mnadeem/boot-opentelemetry-tempo/blob/main/docker-compose.yaml
  loki:
    container_name: loki
    image: grafana/loki:2.8.2
    command: -config.file=/etc/loki/config.yaml
    ports:
      - 3102:3100
      - 9095:9095
    volumes:
      - ./config/loki-local.yaml:/etc/loki/config.yaml

  grafana:
    image: grafana/grafana:11.1.0
    volumes:
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./config/grafana-dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./config/grafana-dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor tempoSearch tempoBackendSearch tempoApmTable
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki
